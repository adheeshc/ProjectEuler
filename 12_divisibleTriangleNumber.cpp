#include <iostream>
#include <cassert>

/*
Problem 12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?

*/

long long generateTriangleNumber(long long n) {
    return n * (n + 1) / 2;
}

long long countDivisors(long long n) {
    long long count = 0;
    for (long long i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            if (i * i == n) {
                count++;
            }
            else {
                count += 2;
            }
        }
    }
    return count;
}

long long divisibleTriangleNumber(long long target) {
    long long answer = 0;
    long long n = 1;
    while (true) {
        long long triangleNumber = generateTriangleNumber(n);
        long long divisors = countDivisors(triangleNumber);
        if (divisors > target) {
            return triangleNumber;
        }
        n++;
    }
}



int main() {

    assert(divisibleTriangleNumber(5) == 28);
    assert(divisibleTriangleNumber(23) == 630);
    assert(divisibleTriangleNumber(167) == 1385280);
    assert(divisibleTriangleNumber(374) == 17907120);
    assert(divisibleTriangleNumber(500) == 76576500);

    std::cout << "All Tests Passed" << std::endl;

    return 0;
}